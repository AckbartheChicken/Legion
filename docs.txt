Legion docs:


Data structures:
	There are three main data classes that are used: A worlddata, viewdata, and textdata object. They store game data, view data, and text data, respectively. There are also 2 custom classes for storing sprites: Group and Collection. 

Sprite Group/Collection:
	A Group is essentially a tricked out dictionary that holds sprites, with some special functions. Note: it is not a child class of Dict, but it does utilize a dict as its main attribute. A Collection is similar, but instead of holding a dictionary of sprites, it holds a dictionary of Groups. When collection object is made, you pass in any number of sprite objects. The collection class will automatically make Group objects and sort sprites into correct Group based on their sprite.tag attribute, which is a str containing a two numbers, separated by a period. Eg "0.0" or "7.13". The tag has two parts as mentioned previously. The first number tells which sprite class it is an instance of, and the second number distinguishes it from others of its class. Eg. The tag "0.0" indicates a pc object with the a secondary id of "0". The tag "7.13" indicates a mapdoor with a secondary tag of "13". The get_item function uses this to find specific sprites or groups. To call it, you just pass in the how tag, and the collection object parses it and return the correct sprite/group. Eg. Collection()["0.0"] would return the Pc object with tag "0.0". Collection()["7"] woudl return the group object of id "7", which is map doors. In order to add more sprites, call the Collection.add() method, using the sprites being added as arguments. It will once again automatically sort the sprites into their correct group and at the correct index. If you try to add a sprite with the same tag as a different sprite, it will raise an exception unless you pass in the kwarg: reset = True. It will then replace the sprite, and also prints out a warning reminding you that happened. The add method is also what is used during the initialization of both group and collection objects to add sprites to the proper place.
	The engine generally should not have to directly interact with the Group objects, most Group interaction should be handled through functions in the Collection object. Eg. Collection.update() calls Group.update() which then calls sprite.update(). Collection.add() also adds sprites to correct group with correct index based on their tag. However, when you want to obtain a specific group, for iteration or other purposes, use the get_item function, and pass in    the id of that group. Eg. Collection()["7"] would return the group object of id "7", which is map doors.
	
Worlddata:
	The Worlddata class contains all the data necessary for the world. It has a sprites attribute which is a Collection object. It was a background attribute which is a pygame surface of the background image. It has a size attribute, which is the size of the map. It has a switches attribute, which is a list containing the state of all switches for that map (the mechanics of the switch system are explained in more detail under the switches/togglers section). Because Legion is built to utilize many different maps and switch between then to make a world, the Worlddata class also has an allsprites, allsizes, allbackgrounds, and allswitches attributes, which each are a list containing many different sprite collections, sizes, backgrounds, or switch lists, respectively. This sprites, size, background, and switches attributes essentially are references to the specific collection, size, background, or switch list that is active, based on which map the player is in. The active attributes/map can be changed via the switch method, which takes a number, telling which map to switch to, as an attribute. This number is simply an index for finding the new attributes to make active. Eg. Worlddata().switch(3), will set the worlddata object to map 3, via setting sprites, sizes, etc. to allsprites[3] and allsizes[3], etc, respectively. When making maps/levels, keep this in mind especially when making mapdoor objects, as they need a map destination attribute which tells which map to change to. The Worlddata class also has an attribute, classtype, which is a list containing a reference to each sprite class, in ascending order of tag, so classtype[int(num)] will return the class that is associated with the primary tag that is equal to num.

Textdata:


Viewdata:
	A custom class that is used to store data about the window and display. It has an attribute "screen" that is a reference to the pygame display object, and it is where you should blit any pygame surfaces to. It also has a screen size attribute, which is the size of the screen attribute. It has a rect attribute, which is a pygame rect that contains the size of the viewing part of the window and shows where the view is currently relative to other sprites. The center method, which will be described in more detail in the next section, takes in world data, and the tag of the focus sprite as arguments, and it will then move its rect so the focus sprite is centered. The view will follow the focus sprite as it moves, but it will not move past the end of the map, so when the focus sprite reaches the edge of the map, the view rect will stop moving in that direction. The focus sprite also has some wiggle room

FINISH THIS EXPLANATION

The wiggle attribute is a number that is the size of the wiggle box around the focus sprite. The border attribute is a number showing how big the border around the view window is. The hitbox and debug attributes are used to display the hitboxes of sprite objects and the current fps, respectively. The fps attribute is the current fps, which is calculated each frame using the pygame pygame.Clock.get_fps() function.

Centering algorithm:
	As mentioned earlier, the 

Game loop and design:


Looking func for interaction:


Attack:


Read/write save:


Alive move func:


Switches/togglers:


Menus:


Level Format/Ogmo Level Editor:

